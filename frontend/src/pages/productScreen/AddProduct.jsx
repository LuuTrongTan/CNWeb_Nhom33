import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  createProduct,
  getProductById,
  updateProduct,
} from "../../service/productAPI";
import styles from "../../styles/scss/productListStyle/AddProduct.module.scss";

const AddProduct = () => {
  const { id } = useParams(); // L·∫•y ID s·∫£n ph·∫©m t·ª´ URL
  const navigate = useNavigate();

  const [product, setProduct] = useState({
    name: "",
    description: "",
    price: "",
    category: "",
    brand: "",
    colors: [],
    sizes: [],
    stock: "",
    images: [],
  });

  const [imagePreview, setImagePreview] = useState([]);

  // L·∫•y d·ªØ li·ªáu c≈© n·∫øu c√≥ ID s·∫£n ph·∫©m
  useEffect(() => {
    if (id) {
      getProductById(id)
        .then((data) => {
          setProduct({
            name: data.name || "",
            description: data.description || "",
            price: data.price || "",
            category: data.category || "",
            brand: data.brand || "",
            colors: data.colors || [],
            sizes: data.sizes || [],
            stock: data.stock || "",
            images: data.images || [],
          });

          // Hi·ªÉn th·ªã ·∫£nh preview t·ª´ URL
          setImagePreview(data.images || []);
        })
        .catch((error) => {
          console.error("L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
        });
    }
  }, [id]);

  // X·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e) => {
    setProduct({ ...product, [e.target.name]: e.target.value });
  };

  // X·ª≠ l√Ω nh·∫≠p nhi·ªÅu m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc
  const handleInputChange = (e, field) => {
    const newValues = e.target.value.split(",");

    setProduct((prev) => ({
      ...prev,
      [field]: newValues, // C·∫≠p nh·∫≠t `colors` ho·∫∑c `sizes` t√πy theo field
    }));
  };

  // X·ª≠ l√Ω upload ·∫£nh
  const handleImageUpload = (e) => {
    const files = Array.from(e.target.files);
    const previewUrls = files.map((file) => URL.createObjectURL(file));
    setImagePreview(previewUrls);

    setProduct({ ...product, images: files });
  };

  // L∆∞u d·ªØ li·ªáu (Th√™m m·ªõi ho·∫∑c C·∫≠p nh·∫≠t)
  const handleSave = async () => {
    const productData = {
      ...product,
      colors: product.colors, // ['ƒêen', 'N√¢u']
      sizes: product.sizes, // ['M', 'L']
      images: product.images, // M·∫£ng URL ·∫£nh ho·∫∑c File
    };

    try {
      if (id) {
        await updateProduct(id, productData); // C·∫≠p nh·∫≠t s·∫£n ph·∫©m
        alert("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      } else {
        await createProduct(productData); // Th√™m s·∫£n ph·∫©m m·ªõi
        alert("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
      }
      navigate("/edit-products");
    } catch (error) {
      console.error("L·ªói khi l∆∞u s·∫£n ph·∫©m:", error);
    }
  };

  return (
    <div className={styles.container}>
      <h2>{id ? "Ch·ªânh s·ª≠a s·∫£n ph·∫©m" : "Th√™m s·∫£n ph·∫©m m·ªõi"}</h2>

      <div className={styles.formRow}>
        <div>
          <label>T√™n s·∫£n ph·∫©m</label>
          <input
            type="text"
            name="name"
            placeholder="T√™n s·∫£n ph·∫©m"
            value={product.name}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>M√¥ t·∫£ s·∫£n ph·∫©m</label>
          <input
            type="text"
            name="description"
            placeholder="M√¥ t·∫£"
            value={product.description}
            onChange={handleChange}
          />
        </div>
      </div>

      <div className={styles.formRow}>
        <div>
          <label>Gi√° s·∫£n ph·∫©m</label>
          <input
            type="number"
            name="price"
            placeholder="Gi√°"
            value={product.price}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>Danh m·ª•c</label>
          <input
            type="text"
            name="category"
            placeholder="Danh m·ª•c"
            value={product.category}
            onChange={handleChange}
          />
        </div>
      </div>

      <div className={styles.formRow}>
        <div>
          <label>Th∆∞∆°ng hi·ªáu</label>
          <input
            type="text"
            name="brand"
            placeholder="Th∆∞∆°ng hi·ªáu"
            value={product.brand}
            onChange={handleChange}
          />
        </div>
        <div>
          <label>S·ªë h√†ng trong kho</label>
          <input
            type="number"
            name="stock"
            placeholder="T·ªìn kho"
            value={product.stock}
            onChange={handleChange}
          />
        </div>
      </div>

      <div className={styles.formRow}>
        <div>
          <label>M√†u s·∫Øc</label>
          <input
            type="text"
            placeholder="Nh·∫≠p m√†u s·∫Øc, c√°ch nhau d·∫•u ph·∫©y"
            value={product.colors.join(",")}
            onChange={(e) => handleInputChange(e, "colors")}
          />
        </div>
        <div>
          <label>K√≠ch th∆∞·ªõc</label>
          <input
            type="text"
            placeholder="Nh·∫≠p k√≠ch th∆∞·ªõc, c√°ch nhau d·∫•u ph·∫©y"
            value={product.sizes.join(",")}
            onChange={(e) => handleInputChange(e, "sizes")}
          />
        </div>
      </div>

      {/* Upload ·∫£nh */}
      <div>
        <label>·∫¢nh minh h·ªça</label>
        <input
          type="file"
          multiple
          onChange={handleImageUpload}
          className={styles.fileInput}
        />
        <div className={styles.imagePreview}>
          {imagePreview.map((src, index) => (
            <img key={index} src={src} alt={`preview-${index}`} />
          ))}
        </div>
      </div>

      {/* N√∫t l∆∞u */}
      <div className={styles.buttons}>
        <button onClick={() => navigate(-1)} className={styles.cancelButton}>
          üîô Quay l·∫°i
        </button>
        <button onClick={handleSave} className={styles.saveButton}>
          {id ? "C·∫≠p nh·∫≠t" : "L∆∞u"}
        </button>
      </div>
    </div>
  );
};

export default AddProduct;
